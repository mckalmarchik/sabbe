#—Ñ–∞–π–ª admin.py
from aiogram import types

import kb
from bot import dp, bot
from handlers.fsm import *
from handlers.db import db_profile_access, db_profile_exist, db_profile_updateone, db_profile_exist_usr, db_profile_get_usrname
from configurebot import cfg

errormessage = cfg['error_message']
lvl1name = cfg['1lvl_adm_name']
lvl2name = cfg['2lvl_adm_name']
lvl3name = cfg['3lvl_adm_name']
devid = cfg['dev_id']

def extract_arg(arg):
    return arg.split()[1:]

async def admin_ot(message: types.Message):
    try:
        uid = message.from_user.id

        if(db_profile_access(uid) >= 1):
            args = extract_arg(message.text)
            if len(args) >= 2:
                chatid = str(args[0])
                args.pop(0)
                answer = ""
                for ot in args:
                    answer+=ot+" "
                await message.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!')
                await bot.send_message(chatid, f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n`{answer}`",parse_mode='Markdown')
                return
            else:
                await message.reply('‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–æ—Ç–≤–µ—Ç 516712732 –í–∞—à –æ—Ç–≤–µ—Ç`',parse_mode='Markdown')
                return
        else:
            return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

async def admin_giveaccess(message: types.Message):
    try:
        uidown = message.from_user.id

        if (db_profile_access(uidown) >= 3):
            args = extract_arg(message.text)
            if len(args) == 2:
                uid = int(args[0])
                access = int(args[1])
                outmsg = ""      
                if db_profile_exist(uid):
                    if access == 0:
                        outmsg = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø—ã —Å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!"
                    elif access == 1:
                        outmsg = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø *{lvl1name}* –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!"
                    elif access == 2:
                        outmsg = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø *{lvl2name}* –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!"
                    elif access == 3:
                        outmsg = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø *{lvl3name}* –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!"
                    else:
                        await message.reply('‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: *3*', parse_mode='Markdown')
                        return
                    db_profile_updateone({'_id': uid}, {"$set": {"access": access}})
                    await message.reply(outmsg, parse_mode='Markdown')
                    return
                else:
                    await message.reply("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",parse_mode='Markdown')
                    return
            else:
                await message.reply('‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–¥–æ—Å—Ç—É–ø 516712372 1`',
                                    parse_mode='Markdown')
                return

        else:
            return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

async def admin_ban(message: types.Message):
    try:
        uidown = message.from_user.id

        if db_profile_access(uidown) >= 2:
            args = extract_arg(message.text)
            if len(args) == 2:
                uid = int(args[0])
                reason = args[1]
                if db_profile_exist(uid):
                    db_profile_updateone({"_id": uid}, {"$set": {'ban': 1}})
                    await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏—á–∏–Ω–∞: `{reason}`',parse_mode='Markdown')
                    await bot.send_message(uid, f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª* –í–∞—Å –≤ –±–æ—Ç–µ\n–ü—Ä–∏—á–∏–Ω–∞: `{reason}`", parse_mode='Markdown')
                    return
                else:
                    await message.reply("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode='Markdown')
                    return
            else:
                await message.reply('‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–±–∞–Ω 51623722 –ü—Ä–∏—á–∏–Ω–∞`',
                                    parse_mode='Markdown')
                return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

async def admin_unban(message: types.Message):
    try:
        uidown = message.from_user.id

        if db_profile_access(uidown) >= 2:
            args = extract_arg(message.text)
            if len(args) == 1:
                uid = int(args[0])
                if db_profile_exist(uid):
                    db_profile_updateone({"_id": uid}, {"$set": {'ban': 0}})
                    await message.reply(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',parse_mode='Markdown')
                    await bot.send_message(uid, f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª* –í–∞—Å –≤ –±–æ—Ç–µ!", parse_mode='Markdown')
                    return
                else:
                    await message.reply("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode='Markdown')
                    return
            else:
                await message.reply('‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/—Ä–∞–∑–±–∞–Ω 516272834`',
                                    parse_mode='Markdown')
                return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

async def admin_id(message: types.Message):
    try:
        args = extract_arg(message.text)
        if len(args) == 1:
            username = args[0]
            if db_profile_exist_usr(username):
                uid = db_profile_get_usrname(username, '_id')
                await message.reply(f"üÜî {uid}")
            else:
                await message.reply("‚ö† –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ* —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode='Markdown')
                return
        else:
            await message.reply('‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–∞–π–¥–∏ nosemka`',
                                parse_mode='Markdown')
            return
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

def register_handler_admin():
    dp.register_message_handler(admin_ot, commands=['–æ—Ç–≤–µ—Ç', 'ot'])
    dp.register_message_handler(admin_giveaccess, commands=['–¥–æ—Å—Ç—É–ø', 'access'])
    dp.register_message_handler(admin_ban, commands=['–±–∞–Ω', 'ban'])
    dp.register_message_handler(admin_unban, commands=['—Ä–∞–∑–±–∞–Ω', 'unban'])
    dp.register_message_handler(admin_id, commands=['–∞–π–¥–∏', 'id'])

#—Ñ–∞–π–ª clien.py
from aiogram import types

import kb
from bot import dp, bot
from handlers.fsm import *
from handlers.db import db_profile_exist, db_profile_insertone, db_profile_banned
from configurebot import cfg


welcomemessage = cfg['welcome_message']
errormessage = cfg['error_message']
devid = cfg['dev_id']
aboutus = cfg['about_us']
question_first_msg = cfg['question_type_ur_question_message']

handler_button_new_question = cfg['button_new_question']
# handler_button_about_us = cfg['button_about_us']


async def client_start(message: types.Message):
    try:
        if(message.chat.type != 'private'):
            await message.answer('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.')
            return
        if db_profile_exist(message.from_user.id):
            await message.answer(f'{welcomemessage}',parse_mode='Markdown', reply_markup=kb.mainmenu)
        else:
            db_profile_insertone({
                '_id': message.from_user.id,
                'username': message.from_user.username,
                'access': 0,
                'ban': 0
            })
            print('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
            await message.answer(f'{welcomemessage}',parse_mode='Markdown', reply_markup=kb.mainmenu)
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

async def client_newquestion(message: types.Message):
    try:
        if message.text == handler_button_new_question:
            if db_profile_banned(message.from_user.id):
                await message.answer("‚ö† –í–∏ *–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ* —É –±–æ—Ç—ñ!", parse_mode='Markdown')
                return
            await message.answer(f"{question_first_msg}")
            await FSMQuestion.text.set()
        # elif message.text == handler_button_about_us:
        #     if db_profile_banned(message.from_user.id):
        #         await message.answer("‚ö† –í–∏ *–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ* —É –±–æ—Ç—ñ!", parse_mode='Markdown')
        #         return
        #     await message.answer(f"{aboutus}", disable_web_page_preview=True, parse_mode='Markdown')

    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')


async def client_getgroupid(message: types.Message):
    try:
        await message.answer(f"Chat id is: *{message.chat.id}*\nYour id is: *{message.from_user.id}*", parse_mode='Markdown')
    except Exception as e:
        cid = message.chat.id
        await message.answer(f"{errormessage}",
                             parse_mode='Markdown')
        await bot.send_message(devid, f"–°–ª—É—á–∏–ª–∞—Å—å *–æ—à–∏–±–∫–∞* –≤ —á–∞—Ç–µ *{cid}*\n–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: `{e}`",
                               parse_mode='Markdown')

def register_handler_client():
    dp.register_message_handler(client_start, commands='start', state=None)
    dp.register_message_handler(client_getgroupid, commands='getchatid')
    dp.register_message_handler(client_newquestion)

#—Ñ–∞–π–ª fsm.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot import bot,dp
from configurebot import cfg

tehchatid = cfg['teh_chat_id']
message_seneded = cfg['question_ur_question_sended_message']

class FSMQuestion(StatesGroup):
	text = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def newquestion(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		if (message.content_type == 'photo'):
			data['text'] = message.caption
		else:
			data['text'] = message.text
	await state.finish()
	if(message.chat.username == None):
		who = "–ù–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	else:
		who = "@"+message.chat.username
	question = data['text']
	if(message.content_type=='photo'):
		ph = message.photo[0].file_id
		await message.reply(f"{message_seneded}",
							parse_mode='Markdown')
		await bot.send_photo(tehchatid, ph, caption=f"‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {who}\n–í–æ–ø—Ä–æ—Å: `{data['text']}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {message.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`",parse_mode='Markdown')
	else:
		await message.reply(f"{message_seneded}",
							parse_mode='Markdown')
		await bot.send_message(tehchatid,
							   f"‚úâ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–û—Ç: {who}\n–í–æ–ø—Ä–æ—Å: `{data['text']}`\n\nüìù –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–≤–µ–¥–∏—Ç–µ `/–æ—Ç–≤–µ—Ç {message.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç`",
							   parse_mode='Markdown')

def register_handler_FSM():
	dp.register_message_handler(newquestion,state=FSMQuestion.text, content_types=['photo', 'text'])

